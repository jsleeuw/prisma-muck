# CI workflow to automate the following:
# - run and report on tests (in a way that provides visibility to the test results in a PR, etc.)
# - run and report on code linting
# - deploy code pushed to main branch to staging environments hosted on Vercel and Heroku
# - deploy 'preview' urls for PRs
#
# Given we will stick with a monorepo for now, this workflow should conditionally run frontend
# and backend jobs based on the files that are been modified

name: deployments

on:
  push:
    branches:
      - main
      - dell-staging

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Cancel active outdated workflows when a newer workflow is running for the same branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  frontend-deploy-staging:
    name: Deploy Frontend (Staging)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: kanga333/variable-mapper@master
        with:
          key: "${{github.base_ref}}"
          map: |
            {
              "main": {
                "project_id": "main_project_id"
              },
              "dell-staging": {
                "project_id": "dell_staging_project_id"
              },
              ".*": {
                "project_id": ""
              }
            }
      - name: Echo environment
        run: |
          echo ${{ github.base_ref }}
          echo ${{ env.project_id }}

        # - name: Checkout code
        #   uses: actions/checkout@v2

        # - name: Deploy frontend to Vercel staging instance
        #   uses: amondnet/vercel-action@v20
        #   with:
        #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
        #     vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        #     vercel-project-id: ${{ matrix.proj_id }}
        #     scope: ${{ secrets.VERCEL_TEAM_ID }}
        #     github-token: ${{ secrets.GITHUB_TOKEN }}
        #     vercel-args: "--prod"
